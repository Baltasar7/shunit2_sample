#!/bin/bash
# file: dummy.test
# test_target: dummy.func

##
## Memo: date; echo ""; sudo journalctl --since="$(date -d '30 second ago' '+%Y-%m-%d %H:%M:%S')" --no-pager
##

###############################################################################
## Unit test Framework functions ##
oneTimeSetUp() {
    # Load test library
    . ./testlib
    
    # Load test target
    . $(pwd)/dummy.func

    echo "$(date)"
}

setUp() {
    mkdir $(pwd)/dummy_tmp
}

tearDown() {
    rm -rf $(pwd)/dummy_tmp
}

oneTimeTearDown() {
    :
}

###############################################################################
## Test functions ##
testCreateFileOk() {
    local file_name="work"
    create_file ${file_name}
    assertEquals "ret val NG." "0" "$?"
    assertTrue "creating file not found." "[ -e ${WORK_DIR}/${file_name} ]"

    return 0
}

testCreateFileNgParamNone() {
    local file_name="work"
    create_file
    assertNotEquals "ret val OK." "0" "$?"
    assertFalse "creating file found." "[ -e ${WORK_DIR}/${file_name} ]"

    return 0
}

testCreateFileNgFileDuplication() {
    local file_name="work"

    # 1st time: success
    create_file ${file_name}
    assertEquals "ret val NG." "0" "$?"
    assertTrue "creating file not found." "[ -e ${WORK_DIR}/${file_name} ]"
    
    # 2nd time: failure (cause: file duplication)
    create_file ${file_name}
    assertNotEquals "ret val OK." "0" "$?"
    assertTrue "creating file not found." "[ -e ${WORK_DIR}/${file_name} ]"

    return 0
}

testWriteFileOk() {
    local file_name="work"
    local string="abcdef12345"

    create_file ${file_name}
    assertEquals "ret val NG." "0" "$?"
    assertTrue "creating file not found." "[ -e ${WORK_DIR}/${file_name} ]"

    write_file ${file_name} ${string}
    assertEquals "ret val NG." "0" "$?"
    assertTrue "file contents is different than expected." "[[ \"${string}\" == $(cat ${WORK_DIR}/${file_name}) ]]"

    echo "  expect string: ${string}"
    echo "  file contents: $(cat ${WORK_DIR}/${file_name})"

    return 0
}

testWriteFileNgFileNotFound() {
    local file_name="work"
    local string="abcdef12345"

    write_file ${file_name} ${string}
    assertEquals "ret val NG." "1" "$?"
    assertFalse "file contents is different than expected." "[[ \"${string}\" == $(cat ${WORK_DIR}/${file_name} 2> /dev/null) ]]"
    
    testlib_is_journallog_last2sec_exists "file(${file_name}) not found"
    assertEquals "journallog not exists" "0" "$?"

    return 0
}


###############################################################################
# Load and run shUnit2.
. ~/shunit2/shunit2
